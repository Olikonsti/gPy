@import std/array.gpy
@import std/tkwrap.gpy
@import std/classtools.gpy

@action global {
    #windisplay Error *log

    # 0 for slow 1 for fast
    exec_mode = 1

    stdlib_version = 0.5

    height_uuid = 0
}

@action every_action {
    py 2 {
        try:
            if len(ERRORS) > 0:
                self.win.update()
        except:
            pass
    }
}

@action delay {
    py 2 {
        import time
        time.sleep(stack["arg[0]"])
    }
}

@action print {
    py 2 {
        print(stack["arg[0]"])
    }
}

@action thread {
"takes function pointer to start a new thread"
    py 2 {
        print(stack["arg[0]"][1:])
        threading.Thread(target=self.action, args=[stack["arg[0]"][1:], []]).start()
    }
}

@action input {
    py 2 {
        try:
            var = input(stack["arg[0]"] + " ")
            self.stack["return"] = var
        except:
            error("missing argument text after input", self.cursor_line, self.cursor_word)
    }
}

"prints name string and type of arg[0]"
@action get_type {
    py 2 {
        print(f'{stack["arg[0]"][1:]} : {stack[stack["arg[0]"][1:]]} : {type(stack[stack["arg[0]"][1:]])}')
    }
}

@action stradd {
    py 2 {
        str1 = str(stack["arg[0]"])
        str2 = str(stack["arg[1]"])
        stack["return"] = str1 + str2
    }
}

"retruns the value of a pointer"
@action value {
    py 2 {
        stack["return"] = stack[stack["arg[0]"][1:]]
    }
}

@action return {
    py 2 {
        stack["return"] = stack["arg[0]"]
    }
}

@action genuuid {
    height_uuid = height_uuid + 0.1
    return height_uuid
}

"waits for user to press Enter before exiting"
@action user_confirm_exit {
    py 2 {
        import os
        print("----------EXIT---------")
        l = []
        for i in self.actions:
            l.append(i)
        print(l)
        print(f"{self.stack = }")
        print(f"{self.inspected_actions = }")
        print("\nPress Enter to exit")
        os.system("pause > nul")
    }
}
            CONVERTING

@action convert.string {
    py 2 {
        stack["return"] = str(stack["arg[0]"])
    }
}

@action convert.int {
    py 2 {
        stack["return"] = int(stack["arg[0]"])
    }
}

@action convert.float {
    py 2 {
        stack["return"] = float(stack["arg[0]"])
    }
}