@import std/classtools.gpy

@action global {
    stdlib_version = 0.5
    height_uuid = 0
    pytools_module = load_python "std/Python/pytools.py"
    py 2 {
        self.pytools = stack["pytools_module"](self)

        self.pytools.declare_variable("True", True)
        self.pytools.declare_variable("False", False)


    }
    declare
}

"loads python code with a class 'module_class' "
@action load_python {
    py 2 {
        f = open(stack["arg[0]"], "r")
        data = f.read()
        f.close()
        exec(data)
        stack["return"] = module_class
    }
}

"deletes a variable from stack or a action from the actions list"
@action del {
    py 2 {

    }
}

@action cmd {
    py 2 {
        import os
        stack["return"] = os.system(stack["arg[0]"])
    }
}

@action warte {
    py 2 {
        import time
        time.sleep(self.pytools.get_variable("arg[0]"))
    }
}

@action schreibe {
    py 2 {
        print(self.pytools.get_variable("arg[0]"))
    }
}

@action thread {
"takes function pointer to start a new thread"
    py 2 {
        print(stack["arg[0]"][1:])
        threading.Thread(target=self.action, args=[stack["arg[0]"][1:], []]).start()
    }
}

@action eingabe {
    py 2 {
        try:
            var = input(stack["arg[0]"] + " ")
            self.stack["return"] = var
        except:
            error("missing argument text after input", self.cursor_line, self.cursor_word)
    }
}

"prints name string and type of arg[0]"
@action get_type {
    py 2 {
        print(f'{stack["arg[0]"][1:]} : {stack[stack["arg[0]"][1:]]} : {type(stack[stack["arg[0]"][1:]])}')
    }
}

@action check_if_defined {
    #return True
    py 2 {
        print(True + True)
    }
}

@action stradd {
    py 2 {
        str1 = str(stack["arg[0]"])
        str2 = str(stack["arg[1]"])
        stack["return"] = str1 + str2
    }
}

"retruns the value of a pointer"
@action value {
    py 2 {
        stack["return"] = stack[stack["arg[0]"][1:]]
    }
}

@action zur√ºck {
    py 2 {
        stack["return"] = stack["arg[0]"]
    }
}

@action genuuid {
    height_uuid = height_uuid + 0.1
    return height_uuid
}
            CONVERTING

@action convert.string {
    py 2 {
        stack["return"] = str(stack["arg[0]"])
    }
}

@action convert.int {
    py 2 {
        stack["return"] = int(stack["arg[0]"])
    }
}

@action convert.float {
    py 2 {
        stack["return"] = float(stack["arg[0]"])
    }
}